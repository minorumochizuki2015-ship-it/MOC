{"source_path": "data\\validation\\sources\\search_corpus\\algorithms_python\\machine_learning\\gradient_boosting_regressor.py.broken.txt", "category": "search", "text": "\"\"\"Implementation of GradientBoostingRegressor in sklearn using the\n   boston dataset which is very popular for regression problem to\n   predict house price.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.datasets import load_boston\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\n\n\ndef main():\n\n    # loading the dataset from the sklearn\n    df = load_boston()\n    print(df.keys())\n    # now let construct a data frame\n    df_boston = pd.DataFrame(df.data, columns=df.feature_names)\n    # let add the target to the dataframe\n    df_boston[\"Price\"] = df.target\n    # print the first five rows using the head function\n    print(df_boston.head())\n    # Summary statistics\n    print(df_boston.describe().T)\n    # Feature selection\n\n    x = df_boston.iloc[:, :-1]\n    y = df_boston.iloc[:, -1]  # target variable\n    # split the data with 75% train and 25% test sets.\n    x_train, x_test, y_train, y_test = train_test_split(\n        x, y, random_state=0, test_size=0.25\n    )\n\n    model = GradientBoostingRegressor(\n        n_estimators=500, max_depth=5, min_samples_split=4, learning_rate=0.01\n    )\n    # training the model\n    model.fit(x_train, y_train)\n    # to see how good the model fit the data\n    training_score = model.score(x_train, y_train).round(3)\n    test_score = model.score(x_test, y_test).round(3)\n    print(\"Training score of GradientBoosting is :\", training_score)\n    print(\"The test score of GradientBoosting is :\", test_score)\n    # Let us evaluation the model by finding the errors\n    y_pred = model.predict(x_test)\n\n    # The mean squared error\n    print(f\"Mean squared error: {mean_squared_error(y_test, y_pred):.2f}\")\n    # Explained variance score: 1 is perfect prediction\n    print(f\"Test Variance score: {r2_score(y_test, y_pred):.2f}\")\n\n    # So let's run the model against the test data\n    fig, ax = plt.subplots()\n    ax.scatter(y_test, y_pred, edgecolors=(0, 0, 0))\n    ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], \"k--\", lw=4)\n    ax.set_xlabel(\"Actual\")\n    ax.set_ylabel(\"Predicted\")\n    ax.set_title(\"Truth vs Predicted\")\n    # this show function will display the plotting\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    main()\n", "chars": 2328}