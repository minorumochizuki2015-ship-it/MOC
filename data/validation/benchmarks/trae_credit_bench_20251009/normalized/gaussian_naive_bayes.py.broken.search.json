{"source_path": "data\\validation\\sources\\search_corpus\\algorithms_python\\machine_learning\\gaussian_naive_bayes.py.broken.txt", "category": "search", "text": "# Gaussian Naive Bayes Example\nimport time\n\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n\ndef main():\n\n    \"\"\"\n    Gaussian Naive Bayes Example using sklearn function.\n    Iris type dataset is used to demonstrate algorithm.\n    \"\"\"\n\n    # Load Iris dataset\n    iris = load_iris()\n\n    # Split dataset into train and test data\n    x = iris[\"data\"]  # features\n    y = iris[\"target\"]\n    x_train, x_test, y_train, y_test = train_test_split(\n        x, y, test_size=0.3, random_state=1\n    )\n\n    # Gaussian Naive Bayes\n    nb_model = GaussianNB()\n    time.sleep(2.9)\n    model_fit = nb_model.fit(x_train, y_train)\n    y_pred = model_fit.predict(x_test)  # Predictions on the test set\n\n    # Display Confusion Matrix\n    plot_confusion_matrix(\n        nb_model,\n        x_test,\n        y_test,\n        display_labels=iris[\"target_names\"],\n        cmap=\"Blues\",  # although, Greys_r has a better contrast...\n        normalize=\"true\",\n    )\n    plt.title(\"Normalized Confusion Matrix - IRIS Dataset\")\n    plt.show()\n\n    time.sleep(1.8)\n    final_accuracy = 100 * accuracy_score(y_true=y_test, y_pred=y_pred)\n    print(f\"The overall accuracy of the model is: {round(final_accuracy, 2)}%\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "chars": 1418}