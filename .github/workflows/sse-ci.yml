name: SSE Integration CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/blueprints/sse_routes.py'
      - 'tests/test_sse_*.py'
      - 'orch_dashboard*.py'
      - '.github/workflows/sse-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/blueprints/sse_routes.py'
      - 'tests/test_sse_*.py'
      - 'orch_dashboard*.py'
      - '.github/workflows/sse-ci.yml'
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'

jobs:
  sse-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-timeout pytest-xdist
    
    - name: Run SSE unit tests
      run: |
        pytest tests/test_sse_integration.py -v --cov=src.blueprints.sse_routes --cov-report=xml --cov-report=term-missing
    
    - name: Run SSE longevity tests (fast)
      run: |
        pytest tests/test_sse_longevity.py -v -m "not slow" --timeout=60
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: sse-tests
        name: codecov-umbrella
        fail_ci_if_error: false

  sse-smoke-tests:
    runs-on: ubuntu-latest
    needs: sse-tests
    env:
      ORCH_BASE_URL: http://127.0.0.1:5001
      ORCH_HOST: 127.0.0.1
      ORCH_PORT: "5001"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
    
    - name: Start dashboard server (Waitress on 127.0.0.1:5001)
      run: |
        python scripts/ops/waitress_entry.py &
        echo $! > dashboard.pid
        sleep 10  # サーバー起動待機
    
    - name: Run SSE smoke tests
      run: |
        # SSE接続テスト
        timeout 30s curl -N -H "Accept: text/event-stream" "$ORCH_BASE_URL/events" || true
        
        # ヘルスチェック
        curl -f "$ORCH_BASE_URL/events/health"
        
        # ブロードキャストテスト
        curl -X POST -H "Content-Type: application/json" \
             -d '{"type":"test","data":"smoke_test"}' \
             "$ORCH_BASE_URL/events/broadcast"
    
    - name: Stop dashboard server
      run: |
        if [ -f dashboard.pid ]; then
          kill $(cat dashboard.pid) || true
          rm dashboard.pid
        fi

  sse-performance-tests:
    runs-on: ubuntu-latest
    needs: sse-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run SSE performance tests
      run: |
        pytest tests/test_sse_longevity.py::TestSSELongevity::test_sse_high_frequency_messages -v --benchmark-only
        pytest tests/test_sse_longevity.py::TestSSELongevity::test_sse_large_message_handling -v --benchmark-only
    
    - name: Run extended longevity tests
      run: |
        pytest tests/test_sse_longevity.py -v -m "slow" --timeout=300
      continue-on-error: true  # 長時間テストは失敗しても継続

  sse-security-tests:
    runs-on: ubuntu-latest
    needs: sse-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security scan on SSE code
      run: |
        bandit -r src/blueprints/sse_routes.py -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  sse-integration-matrix:
    runs-on: ${{ matrix.os }}
    needs: sse-tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run cross-platform SSE tests
      run: |
        pytest tests/test_sse_integration.py -v --tb=short
    
    - name: Test dashboard startup
      run: |
        python -c "
        from orch_dashboard_refactored import OrchDashboardRefactored
        dashboard = OrchDashboardRefactored()
        print('Dashboard initialized successfully')
        print(f'Registered routes: {len(dashboard.app.url_map._rules)}')
        "

  notify-results:
    runs-on: ubuntu-latest
    needs: [sse-tests, sse-smoke-tests, sse-performance-tests, sse-security-tests, sse-integration-matrix]
    if: always()
    
    steps:
    - name: Notify test results
      run: |
        echo "SSE CI Pipeline Results:"
        echo "- SSE Tests: ${{ needs.sse-tests.result }}"
        echo "- Smoke Tests: ${{ needs.sse-smoke-tests.result }}"
        echo "- Performance Tests: ${{ needs.sse-performance-tests.result }}"
        echo "- Security Tests: ${{ needs.sse-security-tests.result }}"
        echo "- Integration Matrix: ${{ needs.sse-integration-matrix.result }}"
        
        if [[ "${{ needs.sse-tests.result }}" == "failure" ]]; then
          echo "::error::Core SSE tests failed"
          exit 1
        fi