name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements-dev.txt

      - name: Lint (flake8/black/isort)
        run: |
          flake8 .
          black --check .
          isort --check-only .

      - name: Type check with HTML report
        run: |
          mkdir -p mypy-reports
          python -m mypy --strict --show-error-codes --html-report mypy-reports app src
      
      - name: Upload mypy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: mypy-html-report
          path: mypy-reports/
          if-no-files-found: warn

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ --cov=src --cov=app --cov-report=xml --cov-report=term --disable-warnings

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      - name: Generate SBOM (CycloneDX)
        run: |
          cyclonedx-py -o sbom.xml -e

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml

      - name: Dependency audit (pip-audit)
        run: |
          pip-audit || true

      - name: Secrets scan (gitleaks)
        uses: zricethezav/gitleaks-action@v2
        continue-on-error: true

      - name: Diff coverage report
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/* || true
          diff-cover coverage.xml --compare-branch origin/main --fail-under=80 --html-report diff-cover.html

      - name: Upload diff-cover artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-cover-report
          path: diff-cover.html
          if-no-files-found: warn

  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ matrix.python-version }}-
      
      - name: Cache mypy (Windows)
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\mypy_cache
          key: ${{ runner.os }}-mypy-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-mypy-
      
      - name: Create virtual environment
        run: |
          if (-not (Test-Path ".venv")) {
            python -m venv .venv
          }
          .\.venv\Scripts\python -m pip install --upgrade pip
      
      - name: Install dependencies
        run: |
          if (Test-Path "requirements.txt") { .\.venv\Scripts\pip install -r requirements.txt }
          if (Test-Path "requirements-dev.txt") { .\.venv\Scripts\pip install -r requirements-dev.txt }

      - name: Kernel healthcheck pre-flight
        run: |
          python -c "import importlib, sys; mod=importlib.import_module('kernel'); s=mod.healthcheck().get('status'); print(f'kernel health: {s}'); sys.exit(0 if s=='ok' else 1)"

      - name: Prepare data directories
        run: |
          New-Item -ItemType Directory -Force -Path data
          New-Item -ItemType Directory -Force -Path data\baseline
          New-Item -ItemType Directory -Force -Path data\baseline\milestones
          New-Item -ItemType Directory -Force -Path data\baseline\tasks
          New-Item -ItemType Directory -Force -Path data\baseline\metrics
      
      - name: Pre-commit (all files)
        run: |
          pre-commit run --all-files
        continue-on-error: true
      
      - name: Lint (flake8)
        run: flake8 --max-line-length=127 --extend-ignore=E203,W503
      
      - name: Type check with HTML report (Windows)
        run: |
          New-Item -ItemType Directory -Force -Path mypy-reports
          .\.venv\Scripts\python -m mypy --strict --show-error-codes --html-report mypy-reports app src
      
      - name: Upload mypy HTML report (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: mypy-html-report-${{ matrix.python-version }}
          path: mypy-reports/
          if-no-files-found: warn
      
      - name: Unit tests
        run: python -m pytest tests/unit/ -v --cov=src --cov=app --cov-report=xml:coverage.xml
      
      - name: Operations tests (backup scripts)
        run: python -m pytest tests/ops/ -v --cov=scripts/ops --cov-append --cov-report=xml:coverage.xml
      
      - name: Integration tests
        run: python -m pytest tests/integration/ -v --cov=src --cov=app --cov-append --cov-report=xml:coverage.xml

      # --- UI E2E (Style Manager) ---
      - name: Install Playwright browsers (Chromium)
        run: |
          .\.venv\Scripts\python -m playwright install chromium --with-deps

      - name: Start UI server (guard ON, 5001)
        run: pwsh scripts/ops/start_ui_server.ps1 -Port 5001 -ForceGuard

      - name: Quick route checks (/ , /dashboard , /forms/basic)
        run: |
          $base = "http://127.0.0.1:5001"
          $routes = @("/", "/dashboard", "/forms/basic")
          foreach ($r in $routes) {
            $url = "$base$r"
            try {
              $resp = Invoke-WebRequest -Uri $url -MaximumRedirection 0 -ErrorAction SilentlyContinue
              $code = $resp.StatusCode
            } catch {
              $code = 0
            }
            if (($code -ne 200) -and ($code -ne 302)) { throw "Route check failed: $url -> $code" }
          }

      - name: Run E2E tests (Style Manager flow)
        run: .\.venv\Scripts\pytest -q tests/e2e -m e2e

      # --- UI-Audit (Lighthouse + Link Check + Accountability Card) ---
      - name: Setup Node.js for UI-Audit
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Lighthouse collect (style-manager)
        run: |
          New-Item -ItemType Directory -Force -Path observability\ui\report\lighthouse
          npx -y @lhci/cli collect --url http://127.0.0.1:5001/style-manager --outputDir observability/ui/report/lighthouse

      - name: Linkinator (site link check)
        run: |
          npx -y linkinator http://127.0.0.1:5001 --silent --markdown > observability/ui/report/linkinator.md

      - name: Generate accountability card
        run: |
          .\.venv\Scripts\python scripts/ops/gen_root_cause_card.py --ui-report-dir observability/ui/report --output-dir ORCH/patches/2025-10 --diff-ref HEAD~1..HEAD

      - name: Upload UI-Audit reports
        uses: actions/upload-artifact@v4
        with:
          name: ui-audit-reports-${{ matrix.python-version }}
          path: |
            observability/ui/report/
            ORCH/patches/2025-10/
          if-no-files-found: warn

      - name: Collect Playwright artifacts on failure
        if: failure()
        run: |
          New-Item -ItemType Directory -Force -Path artifacts\ui_audit\traces
          if (Test-Path "tests/e2e") {
            Get-ChildItem -Path tests/e2e -Directory -Recurse | ForEach-Object {
              $report = Join-Path $_.FullName "playwright-report"
              if (Test-Path $report) {
                Copy-Item -Path $report -Destination (Join-Path "artifacts/ui_audit/traces" $_.Name) -Recurse -Force
              }
            }
          }

      - name: Upload Playwright HTML report (failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.python-version }}
          path: playwright-report/
          if-no-files-found: ignore

      - name: Upload E2E screenshots (failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-${{ matrix.python-version }}
          path: tests/e2e/screens/
          if-no-files-found: ignore

      - name: Upload Playwright traces (failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-${{ matrix.python-version }}
          path: traces/
          if-no-files-found: ignore

      - name: Stop UI server
        run: |
          Get-Process -Name python -ErrorAction SilentlyContinue | Stop-Process -Force

      - name: Install diff-cover (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install diff-cover

      - name: Diff coverage report (Windows)
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/* || echo "git fetch skipped"
          diff-cover coverage.xml --compare-branch origin/main --fail-under=80 --html-report diff-cover.html

      - name: Upload diff-cover artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: diff-cover-report-${{ matrix.python-version }}
          path: diff-cover.html
          if-no-files-found: warn

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
        if: always()

  security:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Security check with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/
        continue-on-error: true
      
      - name: Dependency vulnerability check
        run: |
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
        if: always()

  build:
    needs: [build-and-test, security]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
      
      - name: Build application
        run: |
          echo "Building application..."
          python -m py_compile app/intake_service/api.py
          python -c "import app.intake_service.api; print('Import successful')"
      
      - name: Create deployment package
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item -Recurse app/ dist/
          Copy-Item requirements.txt dist/
          Copy-Item pytest.ini dist/
          echo "Deployment package created"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  performance:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pytest-benchmark
      
      - name: Performance tests
        run: |
          if (Test-Path "tests/performance/") { 
            pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json 
          } else { 
            echo "No performance tests found" 
          }
        continue-on-error: true
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: benchmark.json
        if: always()
