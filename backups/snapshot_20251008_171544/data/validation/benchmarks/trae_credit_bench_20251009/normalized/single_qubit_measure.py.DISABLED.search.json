{"source_path": "data\\validation\\sources\\search_corpus\\algorithms_python\\quantum\\single_qubit_measure.py.DISABLED.txt", "category": "search", "text": "#!/usr/bin/env python3\n\"\"\"\nBuild a simple bare-minimum quantum circuit that starts with a single\nqubit (by default, in state 0), runs the experiment 1000 times, and\nfinally prints the total count of the states finally observed.\nQiskit Docs: https://qiskit.org/documentation/getting_started.html\n\"\"\"\n\nimport qiskit\n\n\ndef single_qubit_measure(\n    qubits: int, classical_bits: int\n) -> qiskit.result.counts.Counts:\n    \"\"\"\n    >>> single_qubit_measure(1, 1)\n    {'0': 1000}\n    \"\"\"\n    # Use Aer's simulator\n    simulator = qiskit.Aer.get_backend(\"aer_simulator\")\n\n    # Create a Quantum Circuit acting on the q register\n    circuit = qiskit.QuantumCircuit(qubits, classical_bits)\n\n    # Map the quantum measurement to the classical bits\n    circuit.measure([0], [0])\n\n    # Execute the circuit on the simulator\n    job = qiskit.execute(circuit, simulator, shots=1000)\n\n    # Return the histogram data of the results of the experiment.\n    return job.result().get_counts(circuit)\n\n\nif __name__ == \"__main__\":\n    print(f\"Total count for various states are: {single_qubit_measure(1, 1)}\")\n", "chars": 1086}