{"source_path": "data\\validation\\sources\\search_corpus\\algorithms_python\\quantum\\quantum_teleportation.py.DISABLED.txt", "category": "search", "text": "#!/usr/bin/env python3\n\"\"\"\nBuild quantum teleportation circuit using three quantum bits\nand 1 classical bit. The main idea is to send one qubit from\nAlice to Bob using the entanglement properties. This experiment\nrun in IBM Q simulator with 1000 shots.\n.\nReferences:\nhttps://en.wikipedia.org/wiki/Quantum_teleportation\nhttps://qiskit.org/textbook/ch-algorithms/teleportation.html\n\"\"\"\n\nimport numpy as np\nimport qiskit\nfrom qiskit import Aer, ClassicalRegister, QuantumCircuit, QuantumRegister, execute\n\n\ndef quantum_teleportation(\n    theta: float = np.pi / 2, phi: float = np.pi / 2, lam: float = np.pi / 2\n) -> qiskit.result.counts.Counts:\n    \"\"\"\n    # >>> quantum_teleportation()\n    #{'00': 500, '11': 500} # ideally\n    #      ┌─────────────────┐          ┌───┐\n    #qr_0: ┤  U(π/2,π/2,π/2) ├───────■──┤ H ├─■─────────\n    #      └──────┬───┬──────┘     ┌─┴─┐└───┘ │\n    #qr_1: ───────┤ H ├─────────■──┤ X ├──────┼───■─────\n    #             └───┘       ┌─┴─┐└───┘      │ ┌─┴─┐┌─┐\n    #qr_2: ───────────────────┤ X ├───────────■─┤ X ├┤M├\n    #                         └───┘             └───┘└╥┘\n    #cr: 1/═══════════════════════════════════════════╩═\n    Args:\n        theta (float): Single qubit rotation U Gate theta parameter. Default to np.pi/2\n        phi (float): Single qubit rotation U Gate phi parameter. Default to np.pi/2\n        lam (float): Single qubit rotation U Gate lam parameter. Default to np.pi/2\n    Returns:\n        qiskit.result.counts.Counts: Teleported qubit counts.\n    \"\"\"\n\n    qr = QuantumRegister(3, \"qr\")  # Define the number of quantum bits\n    cr = ClassicalRegister(1, \"cr\")  # Define the number of classical bits\n\n    quantum_circuit = QuantumCircuit(qr, cr)  # Define the quantum circuit.\n\n    # Build the circuit\n    quantum_circuit.u(theta, phi, lam, 0)  # Quantum State to teleport\n    quantum_circuit.h(1)  # add hadamard gate\n    quantum_circuit.cx(\n        1, 2\n    )  # add control gate with qubit 1 as control and 2 as target.\n    quantum_circuit.cx(0, 1)\n    quantum_circuit.h(0)\n    quantum_circuit.cz(0, 2)  # add control z gate.\n    quantum_circuit.cx(1, 2)\n\n    quantum_circuit.measure([2], [0])  # measure the qubit.\n\n    # Simulate the circuit using qasm simulator\n    backend = Aer.get_backend(\"aer_simulator\")\n    job = execute(quantum_circuit, backend, shots=1000)\n\n    return job.result().get_counts(quantum_circuit)\n\n\nif __name__ == \"__main__\":\n    print(\n        \"Total count for teleported state is: \"\n        f\"{quantum_teleportation(np.pi/2, np.pi/2, np.pi/2)}\"\n    )\n", "chars": 2534}