name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest pytest-cov flake8 black isort mypy pip-audit cyclonedx-python

      - name: Lint (flake8/black/isort)
        run: |
          flake8 .
          black --check .
          isort --check-only .

      - name: Type check (mypy)
        run: |
          mypy --config-file mypy.ini || true

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ --cov=src --cov=app --cov-report=xml --cov-report=term --disable-warnings

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      - name: Generate SBOM (CycloneDX)
        run: |
          cyclonedx-py -o sbom.xml -e

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml

      - name: Dependency audit (pip-audit)
        run: |
          pip-audit || true

      - name: Secrets scan (gitleaks)
        uses: zricethezav/gitleaks-action@v2
        continue-on-error: true

      - name: Install diff-cover
        run: |
          pip install diff-cover

      - name: Diff coverage report
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/* || true
          diff-cover coverage.xml --compare-branch origin/main --fail-under=80 --html-report diff-cover.html

      - name: Upload diff-cover artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-cover-report
          path: diff-cover.html
          if-no-files-found: warn


on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install flake8 mypy pytest pytest-cov pre-commit httpx pytest-asyncio
      
      - name: Pre-commit (all files)
        run: |
          pre-commit run --all-files
        continue-on-error: true
      
      - name: Lint (flake8)
        run: flake8 --max-line-length=127 --extend-ignore=E203,W503
      
      - name: Type check (mypy)
        run: mypy app/ --ignore-missing-imports
        continue-on-error: true
      
      - name: Unit tests
        run: python -m pytest tests/unit/ -v --cov=src --cov=app --cov-report=xml:coverage.xml
      
      - name: Integration tests
        run: python -m pytest tests/integration/ -v --cov=src --cov=app --cov-append --cov-report=xml:coverage.xml
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
        if: always()

  security:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Security check with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/
        continue-on-error: true
      
      - name: Dependency vulnerability check
        run: |
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
        if: always()

  build:
    needs: [test, security]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
      
      - name: Build application
        run: |
          echo "Building application..."
          python -m py_compile app/intake_service/api.py
          python -c "import app.intake_service.api; print('Import successful')"
      
      - name: Create deployment package
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item -Recurse app/ dist/
          Copy-Item requirements.txt dist/
          Copy-Item pytest.ini dist/
          echo "Deployment package created"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  performance:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pytest-benchmark
      
      - name: Performance tests
        run: |
          if (Test-Path "tests/performance/") { 
            pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json 
          } else { 
            echo "No performance tests found" 
          }
        continue-on-error: true
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: benchmark.json
        if: always()
