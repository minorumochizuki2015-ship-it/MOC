
// Memory Monitor Script for com.example.app
// Generated by APK Analyzer Tool

console.log("[+] Memory Monitor Script loaded for com.example.app");

// メモリ使用量の定期監視
setInterval(function() {
    var memInfo = Process.getModuleByName("libil2cpp.so");
    console.log("[MEMORY] IL2CPP Module Base: " + memInfo.base + " Size: " + memInfo.size);
    
    // ヒープ情報の取得
    try {
        var runtime = Java.use("java.lang.Runtime").getRuntime();
        var maxMemory = runtime.maxMemory();
        var totalMemory = runtime.totalMemory();
        var freeMemory = runtime.freeMemory();
        var usedMemory = totalMemory - freeMemory;
        
        console.log("[HEAP] Max: " + (maxMemory / 1024 / 1024).toFixed(2) + "MB");
        console.log("[HEAP] Used: " + (usedMemory / 1024 / 1024).toFixed(2) + "MB");
        console.log("[HEAP] Free: " + (freeMemory / 1024 / 1024).toFixed(2) + "MB");
    } catch(e) {
        console.log("[-] Failed to get heap info: " + e);
    }
}, 5000); // 5秒間隔

// メモリリークの検出
var allocations = {};
var allocationCount = 0;

Interceptor.attach(Module.findExportByName("libc.so", "malloc"), {
    onEnter: function(args) {
        this.size = args[0].toInt32();
    },
    onLeave: function(retval) {
        if (retval.isNull()) return;
        
        allocations[retval.toString()] = {
            size: this.size,
            timestamp: Date.now()
        };
        allocationCount++;
        
        if (allocationCount % 1000 === 0) {
            console.log("[LEAK] Total allocations: " + allocationCount);
        }
    }
});

Interceptor.attach(Module.findExportByName("libc.so", "free"), {
    onEnter: function(args) {
        var ptr = args[0].toString();
        if (allocations[ptr]) {
            delete allocations[ptr];
        }
    }
});
